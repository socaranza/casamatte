<?php 

// Función para crear un post del tipo "photobook-2-0" cuando se guarda una entrada de Gravity Forms
add_action('gform_entry_created', 'crear_post_photobook', 10, 2);
function crear_post_photobook($entry, $form) {
    // Obtén el ID de la entrada
    $entry_id = $entry['id'];

    // Obtener los metadatos desde la tabla wpie_gf_entry_meta utilizando el entry_id
    global $wpdb;
    $metadatos = $wpdb->get_results($wpdb->prepare(
        "SELECT meta_key, meta_value FROM wpie_gf_entry_meta WHERE entry_id = %d",
        $entry_id
    ));

    // Verificar si el meta key 46 contiene el valor "Diseñar Photobook|0"
    $servicio_de_diseno = '';
    foreach ($metadatos as $meta) {
        if ($meta->meta_key == '46') {
            $servicio_de_diseno = $meta->meta_value;
            break;
        }
    }

    if (strpos($servicio_de_diseno, 'Diseñar Photobook|0') === false) {
        return; // Salir de la función si no se cumple la condición
    }

    // Obtener el ID del producto a través de la URL o del contenido del carrito
    $producto_id = null;
    if (isset($_SERVER['REQUEST_URI'])) {
        $slug = basename(untrailingslashit(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)));
        $producto = get_page_by_path($slug, OBJECT, 'product');
        if ($producto) {
            $producto_id = $producto->ID;
        }
    }

    if (!$producto_id) {
        return; // Salir si no se encuentra el producto
    }

    // Obtener el título y la imagen del producto usando el ID del producto
    $producto_titulo = get_the_title($producto_id);
    $producto_imagen_id = get_post_thumbnail_id($producto_id);

    // Crear el nuevo post del tipo "photobook-2-0"
    $nuevo_post = array(
        'post_title'    => $producto_titulo, // Usar el título del producto
        'post_content'  => '',
        'post_status'   => 'publish',
        'post_type'     => 'photobook-2-0',
        'post_author'   => get_current_user_id()
    );

    // Insertar el post y obtener el ID del nuevo post
    $nuevo_post_id = wp_insert_post($nuevo_post);

    if ($nuevo_post_id) {
        // Guardar los metadatos en los campos personalizados correspondientes
        foreach ($metadatos as $meta) {
            switch ($meta->meta_key) {
                case '120': // numero de páginas
                    update_post_meta($nuevo_post_id, 'numero_de_paginas', sanitize_text_field($meta->meta_value));
                    break;
                case '119': // tamaño
                    update_post_meta($nuevo_post_id, 'tamano', sanitize_text_field($meta->meta_value));
                    break;
				case '150': // tamaño AÑO ESCOLAR
                    update_post_meta($nuevo_post_id, 'tamano', sanitize_text_field($meta->meta_value));
                    break;
				case '162': // tamaño bautizo, LUNA DE MIEL
                    update_post_meta($nuevo_post_id, 'tamano', sanitize_text_field($meta->meta_value));
                    break;
				case '184': // tamaño ANUAL
                    update_post_meta($nuevo_post_id, 'tamano', sanitize_text_field($meta->meta_value));
                    break;	
                case '121': // pasta
                    update_post_meta($nuevo_post_id, 'pasta', sanitize_text_field($meta->meta_value));
                    break;
                case '122': // papel
                    update_post_meta($nuevo_post_id, 'papel', sanitize_text_field($meta->meta_value));
                    break;
                case '145': // empaque
                    update_post_meta($nuevo_post_id, 'empaque', sanitize_text_field($meta->meta_value));
                    break;
				case '171': // ventanas WINDOW
                    update_post_meta($nuevo_post_id, 'ventanas', sanitize_text_field($meta->meta_value));
                    break;		
				case '158': // color bright
                    update_post_meta($nuevo_post_id, 'color_de_tela', sanitize_text_field($meta->meta_value));
                    break;
				case '175': // color nude WINDOW
                    update_post_meta($nuevo_post_id, 'color_de_tela', sanitize_text_field($meta->meta_value));
                    break;	
				case '170': // color bright CLASICO
                    update_post_meta($nuevo_post_id, 'color_de_tela', sanitize_text_field($meta->meta_value));
                    break;	
				case '148': // color nude
                    update_post_meta($nuevo_post_id, 'color_de_tela', sanitize_text_field($meta->meta_value));
                    break;
				case '166': // color nude CLASICO, ANUAL
                    update_post_meta($nuevo_post_id, 'color_de_tela', sanitize_text_field($meta->meta_value));
                    break;
				case '157': // color de piel sintetica CLASICO, ANUAL
                    update_post_meta($nuevo_post_id, 'color_de_tela', sanitize_text_field($meta->meta_value));
                    break;
				case '168': // color de curpiel CLASICO, ANUAL
                    update_post_meta($nuevo_post_id, 'color_de_tela', sanitize_text_field($meta->meta_value));
                    break;		
				case '151': // titulo impreso o grabado
                    update_post_meta($nuevo_post_id, 'titulo_impreso_o_grabado', sanitize_text_field($meta->meta_value));
                    break;	
				case '152': // color de grabado
                    update_post_meta($nuevo_post_id, 'color_de_grabado', sanitize_text_field($meta->meta_value));
                    break;
				case '153': // color papel forro
                    update_post_meta($nuevo_post_id, 'color_papel_forro', sanitize_text_field($meta->meta_value));
                    break;
				case '164': // color de grabado CLASICO
                    update_post_meta($nuevo_post_id, 'color_de_grabado', sanitize_text_field($meta->meta_value));
                    break;	
				case '156': // grabado en lomo
                    update_post_meta($nuevo_post_id, 'grabado_en_lomo', sanitize_text_field($meta->meta_value));
                    break;
				case '158': // grabado en lomo CLASICO, PREMIUM, COLOR BLOCK, ANUAL, BODA, CIVIL,
                    update_post_meta($nuevo_post_id, 'grabado_en_lomo', sanitize_text_field($meta->meta_value));
                    break;	
				case '169': // material de forro
                    update_post_meta($nuevo_post_id, 'material_de_forro', sanitize_text_field($meta->meta_value));
                    break;
				case '176': // material de forro ANUAL
                    update_post_meta($nuevo_post_id, 'material_de_forro', sanitize_text_field($meta->meta_value));
                    break;
				case '185': // modelo anual ANUAL
                    update_post_meta($nuevo_post_id, 'modelo_anual', sanitize_text_field($meta->meta_value));
                    break;
                case '136.2': // precio_total
                    update_post_meta($nuevo_post_id, 'precio_total', sanitize_text_field($meta->meta_value));
                    break;
            }
        }

        // Asignar la imagen del producto como el thumbnail del nuevo post
        if ($producto_imagen_id) {
            set_post_thumbnail($nuevo_post_id, $producto_imagen_id);
        }

        // Guardar el título del producto en el metadato 'modelo'
        update_post_meta($nuevo_post_id, 'modelo', $producto_titulo);

        // Obtener el correo del autor y guardarlo en el metadato 'correo_del_autor'
        $autor_email = get_userdata(get_current_user_id())->user_email;
        update_post_meta($nuevo_post_id, 'correo_del_autor', $autor_email);

        // Construir y guardar la URL de software
        $username = get_userdata(get_current_user_id())->user_login; // Obtener el username del usuario
        $ruta_software = 'http://app.casamatte.com/dashboard/page1?username=' . urlencode($username) . '&postId=' . $nuevo_post_id;
        update_post_meta($nuevo_post_id, 'ruta_software', esc_url($ruta_software));
        update_post_meta($nuevo_post_id, 'status', 26); // Para entrega normal

        // Redirigir al usuario a la ruta del software
        wp_redirect($ruta_software);
        exit; // Termina el script después de redirigir
    }
}


